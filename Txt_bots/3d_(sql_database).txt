import telebot
from telebot import types # Ааа... Мы это делали для того, чтобы опускать telebot, при обращении к чему-то из types, а не потому что это почему-то надо отдельно подгружать, т.е. исключительно ради удобства.
import sqlite3 # База данных

bot = telebot.TeleBot('6093324846:AAFQWK-P-xkDmUOO8I-SysC14JFRqSfCeuE')

name = None

@bot.message_handler(commands=["start"])
def start(message):
    conn = sqlite3.connect("database.sql") # Крч, тут мы коннектимся с нашей базой данных. Будет создаваться файл "database.sql"
    # Прикол, он создал файл в проекте, который я указал выше (файл)
    curs = conn.cursor() # Создали курсор, обратившись к базе данных, и вызвав функцию "курсор", через него мы будем редачить базу данных

    curs.execute("CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(50), pass varchar(50))")
    # Тут мы подготовились к создании таблицы, с условем, что её ранее не было, назвали её users
    # Потом в скобках начали указывать поля и данные для них, пояснение для первого поля: "название, тип данных, автоматически изменяемое, первичный ключ"
    # Первичный ключ означает, что через это поле мы сможем обращаться к другим.
    # Дальше мы сделали другое поле, с названием "name", и типом данных "строка", с ограничением на кол-во символов в 50 шт.

    conn.commit() # Вот теперь создали. Значит комит синхронизирует то, что мы подготовились сделать с нашей целью)
    curs.close() # Закрыли соединение с базой данных
    conn.close() # Закрыли само по себе соединение

    bot.send_message(message.chat.id, "Привет, представся")
    bot.register_next_step_handler(message, user_name) # Так значит некст степ хендлер принимает сообщение, и вызывает функцию, которую мы дадим ему в аргумент

def user_name(message):
    global name # Такой прикол, как глобал, был указан для того, чтобы работа внутри этой функции велась с глобальной переменной нэйм, и мы потом могли к ней обратиться в другой функции
    name = message.text.strip() # Стрим удаляет лишние пробелы до и после текста
    bot.send_message(message.chat.id, "А теперь парольчик, приятель)")
    bot.register_next_step_handler(message, user_pass)

def user_pass(message):
    password = message.text.strip()

    conn = sqlite3.connect("database.sql") # Бтв хз, почему для конн и курс не надо делать глобальные переменные...
    curs = conn.cursor()

    # curs.execute(f"INSERT INTO users (name, pass), VALUES ({name}, {password})")
    # f в начале добавили, чтобы сделать эту строку fорматированной, и можно было описать внутри неё переменные (name и password)
    # Ну а так в этой стркое мы ДОБАВИЛИ В таблицу "users", (в столбцы name, pass), ЗНАЧЕНИЯ ({name},{password})
    # А столбец id у нас "auto_increment", т.е. самозаполняющейся, а значит значения в нём будем заполнять не мы, а бот (судя по всему)
    # Tilt, бот не хочет принимать данные через форматированную строку, но способ прикольный, поэтому я его тут оставлю)

    curs.execute("INSERT INTO users (name, pass) VALUES ('%s','%s')" % (name, password))
    # Крч тут мы в ЗНАЧЕНИЯ добавили для прикола с процентами, которые означают, что на их месте будет что-то в формате строки
    # Ну и после всего текста мы добавили переменные, данные которых будут на месте этих приколов с процентами)

    conn.commit()
    curs.close()
    conn.close()

    markup = telebot.types.InlineKeyboardMarkup() # Создали "панель с кнопками"
    markup.add(telebot.types.InlineKeyboardButton("Список пользователей", callback_data = "users")) # Добавили к этой панели кнопку

    bot.send_message(message.chat.id, "Ty", reply_markup=markup)

@bot.callback_query_handler(func = lambda call: True) # Думаю, надо будет как-нибудь разобраться с этим приколом и анонимной функцией
def callback(call):
    conn = sqlite3.connect("database.sql")
    curs = conn.cursor()

    curs.execute("SELECT * FROM users") # Тут мы выбираем ВСЕ ПОЛЯ ИЗ таблицы users
    
    # conn.commit() Тут он не нужен будет, т.к. тут мы получаем данные, а не меняем их
    users = curs.fetchall() # Функция фетчол возвращает все найденные записи, которые мы записываем в переменную users. Думаю это аналог комит'а, но для чтения данных

    info = ''
    for el in users:
        info += f"Имя: {el[1]}, Пароль: {el[2]}\n" # Пояснение не для цикла, а для таблицы, которую мы перебираем через цикл:
        # Судя по всему, перебираться через цикл будут строки в таблице, которые в коде представлять собой будут спискок с ключами и значениями (или только со значениями)
        # Так вот, каждый список - новая строка, и мы из этого списка просто берём значения из ячеек, перебирая их, сначала выбирая строку, а потом стоблик, через индекс)

    curs.close()
    conn.close()

    bot.send_message(call.message.chat.id, info)


bot.polling(none_stop=True)

# Это всё работает, такой кайф) и код чистый более-менее)